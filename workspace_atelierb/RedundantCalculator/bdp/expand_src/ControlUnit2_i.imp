/* ControlUnit2_i
 * Author: yves
 * Creation date: 06/06/2022
 */

IMPLEMENTATION ControlUnit2_i
REFINES ControlUnit2

IMPORTS
    MailBox

SEES CTX


CONCRETE_VARIABLES
    current_u ,
    cu2_error ,
    cu1_main_state ,
    cu2_main_state ,
    prev_main_state ,
    prev_cu1_main_state ,
    prev_cu2_main_state ,
    IS_FIRST_ELECTION , // indique que l’ECU n’a pas atteint ni l’état SLAVE ni l’état MASTER depuis le premier démarrage
    IS_MASTER_BEFORE , // indique que l’ECU était dans l’état MASTER dans l’exécution précédente
    IS_ERROR_BEFORE , // indique que l’ECU était dans l’état ERROR dans l’exécution précédente.
    IS_ERROR_RECEIVED_BEFORE , // indique que l’ECU a reçu de l’autre ECU un état ERROR dans l’exécution précédente
    IS_MASTER // indique que l’ECU dans l’état SLAVE a reçu un état ERROR de l’autre ECU, ce qui lui permet de basculer dans l’état MASTER.

INVARIANT
    current_u : NAT &
    cu2_error : BOOL &
    cu1_main_state : MAIN_STATE &
    cu2_main_state : MAIN_STATE &
    prev_cu1_main_state : MAIN_STATE &
    prev_cu2_main_state : MAIN_STATE &
    prev_main_state : MAIN_STATE &
    IS_FIRST_ELECTION : BOOL &
    IS_MASTER_BEFORE : BOOL &
    IS_ERROR_BEFORE : BOOL &
    IS_ERROR_RECEIVED_BEFORE : BOOL &
    IS_MASTER : BOOL

INITIALISATION
    current_u := 0 ;
    cu2_error := FALSE ;
    cu1_main_state := OFF ;
    cu2_main_state := OFF ;
    prev_cu1_main_state := OFF ;
    prev_cu2_main_state := OFF ;
    prev_main_state := OFF ;
    IS_FIRST_ELECTION := TRUE ;
    IS_MASTER_BEFORE := FALSE ;
    IS_ERROR_BEFORE := FALSE ;
    IS_ERROR_RECEIVED_BEFORE := FALSE ;
    IS_MASTER := FALSE

VALUES
    CU2_IS_FIRST_SLAVE = FALSE // Valeur retreived from settings

OPERATIONS

    next_main_state <-- cu2_next_main_state ( state ) =
    BEGIN

        prev_cu1_main_state <-- mb_get_cu_main_state ( 0 , 1 ) ;
        IF prev_cu1_main_state = ERROR THEN
            IS_ERROR_RECEIVED_BEFORE := TRUE
        ELSE
            IS_ERROR_RECEIVED_BEFORE := FALSE
        END ;

        // state of the previous main state
        prev_cu2_main_state <-- mb_get_cu_main_state ( 0 , 2 ) ;
        IF prev_cu2_main_state = ERROR THEN
            IS_ERROR_BEFORE := TRUE
        ELSE
            IS_ERROR_BEFORE := FALSE
        END ;

        IF state = ERROR THEN
            mb_set_main_state ( ERROR , 2 )
        ELSIF state = SHUTDOWN THEN
            mb_set_main_state ( prev_main_state , 2 )
        END ;

        /**
        * Power supply and possible error occurence
        */

//        cu2_main_state <-- mb_get_cu_main_state(1,2);
//        
//        IF cu2_main_state = ERROR THEN
//            cu2_error := TRUE
//        END;
//        

        cu2_error <-- mb_getCU2Error ;

        IF cu2_error = TRUE THEN
            next_main_state := ERROR ;
            mb_set_main_state ( ERROR , 2 )
        ELSE
            current_u <-- mb_getCurrentU ;

            IF current_u > 32 THEN
                next_main_state := ON
            ELSIF current_u > 32 & current_u < 34 THEN
                next_main_state := ON
            ELSIF current_u < 30 or current_u > 35 THEN
                next_main_state := SHUTDOWN
            ELSIF current_u < 32 THEN
                next_main_state := OFF
            END ;
            mb_set_main_state ( next_main_state , 2 )
        END ;
        cu2_main_state := next_main_state
    END ;

    next_on_state <-- cu2_next_on_state ( state ) =
    BEGIN
        current_u <-- mb_getCurrentU ;
        IF current_u > 32 & current_u < 34 THEN
            next_on_state := RUNNING
        END ;

        IF state = INITIALIZING THEN
            mb_set_on_state ( INITIALIZING , 2 )
        END
    END ;

    next_running_state <-- cu2_next_running_state ( state ) =
    BEGIN
        // state is the previous state
        IF state = MASTER THEN
            IS_MASTER_BEFORE := TRUE
        ELSE
            IS_MASTER_BEFORE := FALSE
        END ;

        IF state = SLAVE THEN
            mb_set_running_state ( SLAVE , 2 )
        ELSIF state = MASTER THEN
            mb_set_running_state ( MASTER , 2 )
        END ;

        //
        // First execution : election of MASTER/SLAVE
        //
        IF CU2_IS_FIRST_SLAVE = TRUE & IS_FIRST_ELECTION = TRUE THEN
            next_running_state := SLAVE ;
            mb_set_running_state ( SLAVE , 2 )
        END ;
        IF CU2_IS_FIRST_SLAVE = FALSE & IS_FIRST_ELECTION = TRUE THEN
            next_running_state := MASTER ;
            mb_set_running_state ( MASTER , 2 )
        END ;

        //
        // L'état de CU2 précédent est en ERROR
        //
        IF IS_MASTER_BEFORE = TRUE & IS_ERROR_BEFORE = TRUE THEN
            next_running_state := SLAVE ;
            mb_set_running_state ( SLAVE , 2 )
        END ;

        //
        // L'état de CU1 précédent est en ERROR
        //
        IF IS_MASTER_BEFORE = FALSE & IS_ERROR_RECEIVED_BEFORE = TRUE THEN
            next_running_state := MASTER ;
            mb_set_running_state ( MASTER , 2 )
        END ;

//        IF IS_MASTER_BEFORE=TRUE & IS_ERROR_RECEIVED_BEFORE=FALSE THEN
//            next_running_state := SLAVE;
//            mb_set_running_state(SLAVE, 2)
//        END;

//        IF cu2_main_state = ERROR THEN
//            next_running_state := SLAVE;
//            mb_set_running_state(SLAVE, 2)
//        END;

        //
        // Si le calculateur 1 est en erreur alors le calculateur 2 passe en MASTER
        //
//        cu1_main_state <-- mb_get_cu_main_state(1,1);

//        IF cu1_main_state = ERROR THEN
//            next_running_state := MASTER;
//            mb_set_running_state(MASTER, 2)
//        END;
//        
        IF next_running_state = UNKNOWN THEN
            mb_set_running_state ( UNKNOWN , 2 )
        END ;
        //next_running_state := SLAVE
        IS_FIRST_ELECTION := FALSE
    END
 END
